package com.shp.dev.network.common.util.file;import com.jcraft.jsch.*;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.Properties;import java.util.Vector;/** * @CreateBy: shp * @version：1.0 * @Description: TODO  对服务器上的文件进行操作 * @CreateTime: 2020-07-09 11:31 */public class UploadFtpFileUtils {    public static void main(String[] args) {        Properties props = new Properties();        try {            props.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("application.yml"));        } catch (IOException e) {        }        String host = props.getProperty("aliyun.host");        Integer port = Integer.valueOf(props.getProperty("aliyun.port"));        String username = props.getProperty("aliyun.username");        String password = props.getProperty("aliyun.password");        String input=props.getProperty("aliyun.directory");        UploadFtpFileUtils sf = new UploadFtpFileUtils();        ChannelSftp sftp = sf.connect(host,port, username, password);        try {            sftp.mkdir("/usr/local/aaa/bbb/");            //sf.upload(input, "E:/a.jpg", sftp);        }catch (Exception e){        }        System.out.println("ok");    }    /**     * @CreateBy: shp     * @version：1.0     * @Description: TODO     * @CreateTime: 2020-07-09 11:13     * @param: host      * @param: port      * @param: username      * @param: password     * @return: com.jcraft.jsch.ChannelSftp     */    public ChannelSftp connect(String host, int port, String username, String password) {        ChannelSftp sftp = null;        try {            JSch jsch = new JSch();            jsch.getSession(username, host, port);            Session sshSession = jsch.getSession(username, host, port);            sshSession.setPassword(password);            Properties sshConfig = new Properties();            sshConfig.put("StrictHostKeyChecking", "no");            sshSession.setConfig(sshConfig);            sshSession.connect();            Channel channel = sshSession.openChannel("sftp");            channel.connect();            sftp = (ChannelSftp) channel;        } catch (Exception e) {            e.printStackTrace();        }        return sftp;    }    /**     * @CreateBy: shp     * @version：1.0     * @Description: TODO 上传文件     * @CreateTime: 2020-07-09 11:10     * @param: directory  上传的目录     * @param: uploadFile  要上传的文件     * @param: sftp     * @return: void     */    public void upload(String directory, String uploadFile, ChannelSftp sftp) {        try {            sftp.cd(directory);            File file = new File(uploadFile);            sftp.put(new FileInputStream(file), file.getName());        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * @CreateBy: shp     * @version：1.0     * @Description: TODO 下载文件     * @CreateTime: 2020-07-09 11:09     * @param: directory 下载的目录     * @param: downloadFile 下载的文件     * @param: saveFile  存在本地的路径     * @param: sftp     * @return: void     */    public void download(String directory, String downloadFile, String saveFile, ChannelSftp sftp) {        try {            sftp.cd(directory);            File file = new File(saveFile);            sftp.get(downloadFile, new FileOutputStream(file));        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * @CreateBy: shp     * @version：1.0     * @Description: TODO 删除文件     * @CreateTime: 2020-07-09 11:09     * @param: directory   要删除文件所在目录     * @param: deleteFile  要删除的文件     * @param: sftp     * @return: void     */    public void delete(String directory, String deleteFile, ChannelSftp sftp) {        try {            sftp.cd(directory);            sftp.rm(deleteFile);        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * @CreateBy: shp     * @version：1.0     * @Description: TODO     * @CreateTime: 2020-07-09 11:09     * @param: directory 要列出的目录     * @param: sftp     * @return: java.util.Vector     */    public Vector listFiles(String directory, ChannelSftp sftp)            throws SftpException {        return sftp.ls(directory);    }}