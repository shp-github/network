package com.shp.dev.network.common.util.image;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Arrays;

/**
 * 根据左上角坐标和右下角坐标裁剪图片
 * Created by hezhao on 2019/4/19 20:40
 */
public class ImagePointCutUtils {



    /** 根据坐标裁剪图片
     * @param sourceFilePath 要裁剪的图片地址
     * @param targetFilePath 图片保存地址
     * @param startX 左上角X轴坐标
     * @param startY 左上角Y轴坐标
     * @param endX 右下角X轴坐标
     * @param endY 右下角Y轴坐标
     * @return
     */
    public static void cutImage(String sourceFilePath, String targetFilePath, int startX, int startY, int endX, int endY) throws IOException {
        cutImage(new File(sourceFilePath), targetFilePath, startX, startY, endX, endY);
    }

    /** 根据坐标裁剪图片
     * @param file 要裁剪的图片文件
     * @param targetFilePath 图片保存地址
     * @param startX 左上角X轴坐标
     * @param startY 左上角Y轴坐标
     * @param endX 右下角X轴坐标
     * @param endY 右下角Y轴坐标
     * @return
     */
    public static void cutImage(File file, String targetFilePath, int startX, int startY, int endX, int endY) throws IOException {
        BufferedImage sourceImage = ImageIO.read(file);
        cutImage(sourceImage, targetFilePath, startX, startY, endX, endY);
    }

    /** 根据坐标裁剪图片
     * @param sourceImage 要裁剪的图像
     * @param targetFilePath 图片保存地址
     * @param startX 左上角X轴坐标
     * @param startY 左上角Y轴坐标
     * @param endX 右下角X轴坐标
     * @param endY 右下角Y轴坐标
     * @return
     */
    public static void cutImage(BufferedImage sourceImage, String targetFilePath, int startX, int startY, int endX, int endY) {
        BufferedImage result = cutImage(sourceImage, startX, startY, endX, endY);
        try {
            String suffixName = getSuffixName(targetFilePath);
            ImageIO.write(result, suffixName, new FileOutputStream(targetFilePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /** 根据坐标裁剪图片
     * @param sourceImage 要裁剪的图像
     * @param startX 左上角X轴坐标
     * @param startY 左上角Y轴坐标
     * @param endX 右下角X轴坐标
     * @param endY 右下角Y轴坐标
     * @return
     */
    public static BufferedImage cutImage(BufferedImage sourceImage, int startX, int startY, int endX, int endY) {
        if (sourceImage == null) {
            throw new RuntimeException("图片信息为空");
        }
        int width = sourceImage.getWidth();
        int height = sourceImage.getHeight();
        if (startX == -1) {
            startX = 0;
        }
        if (startY == -1) {
            startY = 0;
        }
        if (endX == -1) {
            endX = width - 1;
        }
        if (endY == -1) {
            endY = height - 1;
        }
        BufferedImage result = new BufferedImage(endX - startX, endY - startY, 4);
        for (int x = startX; x < endX; ++x) {
            for (int y = startY; y < endY; ++y) {
                int rgb = sourceImage.getRGB(x, y);
                result.setRGB(x - startX, y - startY, rgb);
            }
        }
        return result;
    }

    /** 根据坐标裁剪Base64图片
     * @param base64string 要裁剪的图片Base64字符串
     * @param suffixName 后缀名
     * @param startX 左上角X轴坐标
     * @param startY 左上角Y轴坐标
     * @param endX 右下角X轴坐标
     * @param endY 右下角Y轴坐标
     * @return
     */
    public static String cutBase64Image(String base64string, String suffixName, int startX, int startY, int endX, int endY) {
        // base64转bufferedImage
        BufferedImage bufferedImage = getBufferedImage(base64string);
        BufferedImage result = cutImage(bufferedImage, startX, startY, endX, endY);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();// io流
        try {
            ImageIO.write(result, suffixName, baos);
            // 写入流中
            byte[] bytes = baos.toByteArray(); // 转换成字节
            BASE64Encoder encoder = new BASE64Encoder();
            String img_base64 = encoder.encodeBuffer(bytes).trim(); // 转换成base64串
            img_base64 = img_base64.replaceAll("\n", "").replaceAll("\r", ""); // 删除 \r\n
            // 前面拼上前缀
            img_base64 = "data:image/"+suffixName+";base64,"+img_base64;
            return img_base64;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "";
    }

    /** base64String 转 BufferedImage
     * @param base64string
     * @return BufferedImage
     */
    public static BufferedImage getBufferedImage(String base64string) {
        BufferedImage image = null;
        try {
            InputStream stream = baseToInputStream(base64string);
            image = ImageIO.read(stream);
            System.out.println(">>>" + image.getWidth() + "," + image.getHeight() + "<<<");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return image;
    }

    /**
     * base64string 转 inputStream
     * @param base64string
     * @return
     */
    public static InputStream baseToInputStream(String base64string) {
        ByteArrayInputStream stream = null;
        try {
            BASE64Decoder decoder = new BASE64Decoder();
            byte[] bytes1 = decoder.decodeBuffer(base64string);
            stream = new ByteArrayInputStream(bytes1);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return stream;
    }

    /**
     * 获取图片后缀名
     * @param fileName 文件名
     * @return
     */
    public static String getSuffixName(String fileName) {
        // ImageIO 支持的图片类型 : [BMP, bmp, jpg, JPG, wbmp, jpeg, png, PNG, JPEG, WBMP, GIF, gif]
        String types = Arrays.toString(ImageIO.getReaderFormatNames()).replace("]", ",");
        String suffix = null;
        // 获取图片后缀
        if(fileName.contains(".")) {
            suffix = fileName.substring(fileName.lastIndexOf(".") + 1);
        }
        // 类型和图片后缀全部小写，然后判断后缀是否合法
        if(suffix == null || suffix.trim().length() == 0 || !types.toLowerCase().contains(suffix.toLowerCase() + ",")){
            throw new RuntimeException("Sorry, the image suffix [" + suffix + "] is illegal. the standard image suffix is {}." + types);
        }
        return suffix;
    }

    public static void main(String[] args) throws IOException {

        String inputFilePath="D:/b.jpg";
        String outFilePath="D:/b.jpg";
        double d=1;
        int [] arr[] ={{860,20},{650,20},{300,1000},{1700,1000}};
        int x1 = 0;
        int y1 = 0;
        int x2 = 0;
        int y2 = 0;
        x1= (int) (arr[0][0]/d);
        y1= (int) (arr[0][1]/d);
        for (int i = 1; i < arr.length; i++) {
            x2= (int) (arr[i][0]/d);
            y2= (int) (arr[i][1]/d);
            cutImage(inputFilePath, outFilePath, x1, y1, x2, y2);
            x1=x2;
            y1=y2;
        }

        // base64
//		String base64 = "";
//		String cutBase64 = cutBase64Image(base64, "jpeg", 319, 92, 394, 167);
//		System.out.println(cutBase64);
    }

}

